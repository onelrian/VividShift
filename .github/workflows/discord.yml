# name: Send Results to Discord

# on:
#   workflow_run:
#     workflows: ["Build and Deploy Docker Container"]
#     types:
#       - completed

# jobs:
#   send-to-discord:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout repository
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # Step 2: Download output artifact from the previous workflow
#       - name: Download output artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: work-distribution-output
#           path: output

#       # Step 3: Debug downloaded files
#       - name: Debug downloaded files
#         run: ls -lah output

#       # Step 4: Check if output.txt exists and format the message for Discord
#       - name: Read and format output for Discord
#         run: |
#           if [ ! -f output/output.txt ]; then
#             echo "❌ Error: output.txt not found! Skipping Discord notification."
#             exit 0
#           fi

#           # Prepare formatted output for Discord
#           FORMATTED_OUTPUT="📊 **Work Distribution Results**\n\n"
#           jq -r 'to_entries | .[] | "\(.key): \(.value)"' output/output.txt | while IFS= read -r line; do
#             key=$(echo "$line" | cut -d: -f1)
#             value=$(echo "$line" | cut -d: -f2-)

#             # Assign icons based on key
#             case "$key" in
#               "Tanks") icon="🛢️"; sub_icon="💧";;
#               "Bin") icon="🗑️"; sub_icon="🚮";;
#               "Front") icon="🚪"; sub_icon="🛠️";;
#               "Toilet A") icon="🚻"; sub_icon="🧽";;
#               "Toilet B") icon="🚻"; sub_icon="🧼";;
#               "Backyard") icon="🏡"; sub_icon="🌿";;
#               "Parlor") icon="🛋️"; sub_icon="🧹";;
#               *) icon="🔹"; sub_icon="";;
#             esac

#             FORMATTED_OUTPUT+="$icon **$key**\n$sub_icon Assigned: $value\n\n"
#           done

#           # Prepare Discord payload
#           echo "{\"content\": \"$FORMATTED_OUTPUT\"}" > discord_payload.json

#       # Step 5: Debug the Discord payload (Optional step for checking the content before sending)
#       - name: Debug Discord Payload
#         run: cat discord_payload.json

#       # Step 6: Send the results to Discord
#       - name: Send to Discord
#         run: |
#           curl -X POST -H "Content-Type: application/json" \
#             --fail --silent --show-error \
#             -d @discord_payload.json \
#             ${{ secrets.DISCORD_WEBHOOK }}
