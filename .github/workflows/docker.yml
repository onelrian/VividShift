name: Build and Deploy Docker Container

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 */14 * *'  # Runs every 14 days

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/work-group-generator:latest .

      - name: Run Docker Container and collect output
        id: run_container
        run: |
          docker run --rm ghcr.io/${{ github.repository }}/work-group-generator:latest > output.txt
          cat output.txt

      - name: Set output for Discord message
        id: set_output
        run: |
          echo "::set-output name=work_output::$(cat output.txt)"

  send-to-discord:
    needs: build-and-run
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Read the output from the build job
      - name: Read and format output for Discord
        run: |
          OUTPUT="${{ needs.build-and-run.outputs.work_output }}"

          if [ -z "$OUTPUT" ]; then
            echo "❌ Error: No output found! Skipping Discord notification."
            exit 0
          fi

          FORMATTED_OUTPUT="📊 **Work Distribution Results**\n\n"

          while IFS= read -r line; do
            key=$(echo "$line" | awk -F': ' '{print $1}')
            value=$(echo "$line" | awk -F': ' '{print $2}' | tr -d '[]"')
            
            case "$key" in
              "Tanks") icon="🛢️"; sub_icon="💧";;
              "Bin") icon="🗑️"; sub_icon="🚮";;
              "Front") icon="🚪"; sub_icon="🛠️";;
              "Toilet A") icon="🚻"; sub_icon="🧽";;
              "Toilet B") icon="🚻"; sub_icon="🧼";;
              "Backyard") icon="🏡"; sub_icon="🌿";;
              "Parlor") icon="🛋️"; sub_icon="🧹";;
              *) icon="🔹"; sub_icon="";;
            esac

            FORMATTED_OUTPUT+="$icon **$key**\n$sub_icon Assigned: $value\n\n"
          done <<< "$OUTPUT"

          echo "{\"content\": \"$FORMATTED_OUTPUT\"}" > discord_payload.json

      - name: Send to Discord
        run: |
          curl -X POST -H "Content-Type: application/json" \
            --fail --silent --show-error \
            -d @discord_payload.json \
            ${{ secrets.DISCORD_WEBHOOK }}
