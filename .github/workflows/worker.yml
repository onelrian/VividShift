name: Build and Deploy Docker Container

on:
  push:
    branches:
      - main
      - develop # Added develop branch to triggers for testing
  workflow_dispatch:
  schedule:
    - cron: '0 10 */14 * *' # Runs every 14 days at 10 AM UTC

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/work-group-generator:latest .

      - name: Run Docker Container and Capture Output
        # --- THIS IS THE CRITICAL CHANGE ---
        # Added '-w /app' to set the working directory for the running program.
        # This ensures it can find file_a.txt and assignment_history.json
        # inside the mounted volume.
        run: |
          docker run --rm -v "$(pwd):/app" -w /app ghcr.io/${{ github.repository }}/work-group-generator:latest > output.txt
          
          echo "🔍 Checking output.txt:"
          cat output.txt || echo "⚠️ No content in output.txt"

          if [ ! -s output.txt ]; then
            echo "❌ Error: output.txt is empty! Exiting."
            exit 1
          fi

      - name: Commit updated assignment history
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update assignment history [skip ci]"
          file_pattern: assignment_history.json
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"

      - name: Upload Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: work-output
          path: output.txt
          retention-days: 1

  send-to-discord:
    # This job does not need any changes.
    needs: build-and-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Output Artifact
        uses: actions/download-artifact@v4
        with:
          name: work-output
          path: .

      - name: Decode Output for Discord
        run: |
          if [ ! -f output.txt ] || [ ! -s output.txt ]; then
            echo "❌ Error: output.txt is missing or empty! Exiting."
            exit 1
          fi
          cat output.txt > formatted_output.txt

      - name: Read and Format Output for Discord
        run: |
          FORMATTED_OUTPUT="📊 **Work Distribution Results**\n\n"
          # Using a temporary file to avoid issues with special characters in the loop
          TMP_FILE=$(mktemp)
          # Process the output file line by line
          # This handles lines like "➡️  Parlor      : Person1, Person2"
          grep '➡️' formatted_output.txt > "$TMP_FILE"
          while IFS= read -r line; do
            key=$(echo "$line" | awk -F':' '{print $1}' | xargs | sed 's/➡️  //')
            value=$(echo "$line" | awk -F':' '{$1=""; print $0}' | xargs)
            
            case "$key" in
              "Tank") icon="🛢️"; sub_icon="💧";;
              "Bin") icon="🗑️"; sub_icon="🚮";;
              "Frontyard") icon="🚪"; sub_icon="🛠️";;
              "Toilet A") icon="🚻"; sub_icon="🧽";;
              "Toilet B") icon="🚻"; sub_icon="🧼";;
              "Backyard") icon="🏡"; sub_icon="🌿";;
              "Parlor") icon="🛋️"; sub_icon="🧹";;
              *) icon="🔹"; sub_icon="";;
            esac
            FORMATTED_OUTPUT+="$icon **$key**\n$sub_icon Assigned: $value\n\n"
          done < "$TMP_FILE"
          # Escape special characters for JSON payload
          FORMATTED_OUTPUT=$(echo -n "$FORMATTED_OUTPUT" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed -z 's/\n/\\n/g')
          echo "{\"content\": \"$FORMATTED_OUTPUT\"}" > discord_payload.json

      - name: Debug Discord Payload
        run: cat discord_payload.json

      - name: Send to Discord
        run: |
          if [ -s discord_payload.json ]; then
            curl -X POST -H "Content-Type: application/json" \
              --fail --silent --show-error \
              -d @discord_payload.json \
              ${{ secrets.DISCORD_WEBHOOK }}
          else
            echo "⚠️ No data to send to Discord."
          fi