name: Build and Deploy Docker Container

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 10 */14 * *'  # Runs every 14 days at 10 AM UTC
jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/work-group-generator:latest .

      - name: Run Docker Container and Capture Output
        run: |
          docker run --rm ghcr.io/${{ github.repository }}/work-group-generator:latest > output.txt
          
          echo "🔍 Checking output.txt:"
          ls -lah output.txt  # Debugging step
          cat output.txt || echo "⚠️ No content in output.txt"

          if [ ! -s output.txt ]; then
            echo "❌ Error: output.txt is empty! Exiting."
            exit 1
          fi

      - name: Encode Output for GitHub Actions
        run: |
          echo "ENCODED_OUTPUT=$(base64 -w0 < output.txt)" >> $GITHUB_ENV

      - name: Upload Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: work-output
          path: output.txt
          retention-days: 1

  send-to-discord:
    needs: build-and-run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Output Artifact
        uses: actions/download-artifact@v4
        with:
          name: work-output
          path: .

      - name: Decode Output for Discord
        run: |
          if [ ! -f output.txt ] || [ ! -s output.txt ]; then
            echo "❌ Error: output.txt is missing or empty! Exiting."
            exit 1
          fi

          cat output.txt > formatted_output.txt

          echo "🔍 Checking formatted_output.txt:"
          ls -lah formatted_output.txt  # Debugging step
          cat formatted_output.txt || echo "⚠️ No content in formatted_output.txt"

          if [ ! -s formatted_output.txt ]; then
            echo "❌ Error: formatted_output.txt is empty! Exiting."
            exit 1
          fi

      - name: Read and Format Output for Discord
        run: |
          FORMATTED_OUTPUT="📊 **Work Distribution Results**\n\n"

          while IFS= read -r line; do
            key=$(echo "$line" | awk -F': ' '{print $1}')
            value=$(echo "$line" | awk -F': ' '{print $2}' | tr -d '[]"')

            case "$key" in
              "Tank") icon="🛢️"; sub_icon="💧";;
              "Bin") icon="🗑️"; sub_icon="🚮";;
              "Frontyard") icon="🚪"; sub_icon="🛠️";;
              "Toilet A") icon="🚻"; sub_icon="🧽";;
              "Toilet B") icon="🚻"; sub_icon="🧼";;
              "Backyard") icon="🏡"; sub_icon="🌿";;
              "Parlor") icon="🛋️"; sub_icon="🧹";;
              *) icon="🔹"; sub_icon="";;
            esac

            FORMATTED_OUTPUT+="$icon **$key**\n$sub_icon Assigned: $value\n\n"
          done < formatted_output.txt

          echo "{\"content\": \"$FORMATTED_OUTPUT\"}" > discord_payload.json

      - name: Debug Discord Payload
        run: cat discord_payload.json

      - name: Send to Discord
        run: |
          if [ -s discord_payload.json ]; then
            curl -X POST -H "Content-Type: application/json" \
              --fail --silent --show-error \
              -d @discord_payload.json \
              ${{ secrets.DISCORD_WEBHOOK }}
          else
            echo "⚠️ No data to send to Discord."
          fi
