# .github/workflows/main.yml

name: Build and Deploy Docker Container

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
  schedule:
    - cron: '0 10 */14 * *' # Runs every 14 days at 10 AM UTC

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/work-group-generator:latest .

      - name: Run Docker Container and Capture Output
        run: |
          docker run --rm -v "$(pwd):/app" -w /app ghcr.io/${{ github.repository }}/work-group-generator:latest > output.txt
          
          echo "🔍 Checking output.txt:"
          cat output.txt || echo "⚠️ No content in output.txt"

          if [ ! -s output.txt ]; then
            echo "❌ Error: output.txt is empty! Exiting."
            exit 1
          fi

      - name: Commit updated assignment history
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update assignment history [skip ci]"
          file_pattern: assignment_history.json
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"

      - name: Upload Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: work-output
          path: output.txt
          retention-days: 1

  send-to-discord:
    needs: build-and-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Output Artifact
        uses: actions/download-artifact@v4
        with:
          name: work-output
          path: .

      - name: Decode Output for Discord
        run: |
          if [ ! -f output.txt ] || [ ! -s output.txt ]; then
            echo "❌ Error: output.txt is missing or empty! Exiting."
            exit 1
          fi
          # We only need the lines with the actual assignments for the message
          grep '➡️' output.txt > formatted_output.txt

      - name: Read and Format Output for Discord
        # --- THIS IS THE FINAL, CORRECTED STEP ---
        id: format_message # Give the step an ID to reference its output
        run: |
          # Start with the title and initial newlines
          MESSAGE="📊 **Work Distribution Results**\n\n"
          
          # Read the assignment lines and build the message string
          while IFS= read -r line; do
            key=$(echo "$line" | awk -F':' '{print $1}' | sed 's/➡️//' | xargs)
            value=$(echo "$line" | awk -F':' '{$1=""; print $0}' | xargs)
            
            case "$key" in
              "Tank")      icon="🛢️"; sub_icon="💧";;
              "Bin")       icon="🗑️"; sub_icon="🚮";;
              "Frontyard") icon="🚪"; sub_icon="🛠️";;
              "Toilet A")  icon="🚻"; sub_icon="🧽";;
              "Toilet B")  icon="🚻"; sub_icon="🧼";;
              "Backyard")  icon="🏡"; sub_icon="🌿";;
              "Parlor")    icon="🛋️"; sub_icon="🧹";;
              *)           icon="🔹"; sub_icon="";;
            esac
            
            # Append the formatted line to the message variable
            MESSAGE+="$icon **$key**\n$sub_icon Assigned: $value\n\n"
          done < formatted_output.txt
          
          # Use an environment file to handle the multi-line string safely
          # This is the most robust method in GitHub Actions
          echo "message_content<<EOF" >> $GITHUB_ENV
          echo "$MESSAGE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Construct JSON Payload using jq
        # This step uses the 'jq' tool, which is standard on GitHub runners,
        # to safely create the JSON payload. It handles all escaping correctly.
        run: |
          jq -n --arg content "${{ env.message_content }}" '{"content": $content}' > discord_payload.json

      - name: Debug Discord Payload
        run: cat discord_payload.json

      - name: Send to Discord
        run: |
          if [ -s discord_payload.json ]; then
            curl -X POST -H "Content-Type: application/json" \
              --fail --silent --show-error \
              -d @discord_payload.json \
              ${{ secrets.DISCORD_WEBHOOK }}
          else
            echo "⚠️ No data to send to Discord."
          fi