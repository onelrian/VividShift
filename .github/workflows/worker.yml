# .github/workflows/main.yml

name: Build and Deploy Docker Container

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
  schedule:
    - cron: '0 10 */14 * *' # Runs every 14 days at 10 AM UTC

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/work-group-generator:latest .
      - name: Run Docker Container and Capture Output
        run: |
          docker run --rm -v "$(pwd):/app" -w /app ghcr.io/${{ github.repository }}/work-group-generator:latest > output.txt
          echo "🔍 Checking output.txt:"
          cat output.txt || echo "⚠️ No content in output.txt"
          if [ ! -s output.txt ]; then
            echo "❌ Error: output.txt is empty! Exiting."
            exit 1
          fi
      - name: Commit updated assignment history
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update assignment history [skip ci]"
          file_pattern: assignment_history.json
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"
      - name: Upload Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: work-output
          path: output.txt
          retention-days: 1

  send-to-discord:
    needs: build-and-run
    runs-on: ubuntu-latest
    steps:
      - name: Download Output Artifact
        uses: actions/download-artifact@v4
        with:
          name: work-output
          path: .
      
      - name: Prepare Discord Embed Fields
        # This step builds a string of JSON 'field' objects, one for each assignment.
        id: format_fields
        run: |
          # Filter for only the assignment lines
          grep '➡️' output.txt > formatted_output.txt
          
          # Start building the JSON array for the fields
          FIELDS_JSON=""
          while IFS= read -r line; do
            key=$(echo "$line" | awk -F':' '{print $1}' | sed 's/➡️//' | xargs)
            value=$(echo "$line" | awk -F':' '{$1=""; print $0}' | xargs)
            
            case "$key" in
              "Tank")      icon="🛢️";;
              "Bin")       icon="🗑️";;
              "Frontyard") icon="🚪";;
              "Toilet A")  icon="🚻";;
              "Toilet B")  icon="🚻";;
              "Backyard")  icon="🏡";;
              "Parlor")    icon="🛋️";;
              *)           icon="🔹";;
            esac

            # Use jq to safely create a JSON object for this field
            # and append it to our string, separated by commas.
            FIELD=$(jq -n --arg name "$icon $key" --arg value "Assigned: $value" \
              '{name: $name, value: $value, inline: false}')
            FIELDS_JSON+="$FIELD,"
          done < formatted_output.txt
          
          # Remove the trailing comma
          FIELDS_JSON="[${FIELDS_JSON%,}]"
          
          # Save the final JSON array to a GitHub Actions output variable
          echo "fields_json=$FIELDS_JSON" >> $GITHUB_OUTPUT

      - name: Construct and Send Discord Payload
        run: |
          # Get the current timestamp in ISO 8601 format
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Use jq to construct the final, complex embed object.
          # We pass the fields JSON string from the previous step's output.
          jq -n \
            --argjson fields "${{ steps.format_fields.outputs.fields_json }}" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "📊 Work Distribution Results",
                  "color": 5814783,
                  "timestamp": $timestamp,
                  "fields": $fields
                }
              ]
            }' > discord_payload.json
            
          echo "--- Generated Payload ---"
          cat discord_payload.json
          echo "-----------------------"
          
          # Send the payload to Discord
          curl -X POST -H "Content-Type: application/json" \
            --fail --silent --show-error \
            -d @discord_payload.json \
            ${{ secrets.DISCORD_WEBHOOK }}